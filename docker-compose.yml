version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: crypto-mysql
    environment:
      MYSQL_ROOT_PASSWORD: crypto_root_2024
      MYSQL_DATABASE: crypto_monitoring
      MYSQL_USER: crypto_user
      MYSQL_PASSWORD: crypto_pass_2024
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crypto-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass crypto_redis_2024
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "crypto_redis_2024", "ping"]
      timeout: 3s
      retries: 5

  # 后端服务
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    container_name: crypto-backend
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=crypto_monitoring
      - DB_USER=crypto_user
      - DB_PASSWORD=crypto_pass_2024
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=crypto_redis_2024
      - FLASK_ENV=production
      - PYTHONPATH=/app
    ports:
      - "8000:8000"
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    networks:
      - crypto-network
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      timeout: 10s
      retries: 5
      start_period: 30s

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crypto-frontend
    ports:
      - "8080:80"
    networks:
      - crypto-network
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - crypto-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-network:
    driver: bridge